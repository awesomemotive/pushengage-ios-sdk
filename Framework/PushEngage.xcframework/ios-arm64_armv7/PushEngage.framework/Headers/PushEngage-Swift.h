#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.4 (swiftlang-1205.0.26.9 clang-1205.0.19.55)
#ifndef PUSHENGAGE_SWIFT_H
#define PUSHENGAGE_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="PushEngage",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

typedef SWIFT_ENUM(NSInteger, ActionType, open) {
  ActionTypeOpened = 0,
  ActionTypeTaken = 1,
};

@class NSNumber;

SWIFT_CLASS("_TtC10PushEngage14AsyncOperation")
@interface AsyncOperation : NSOperation
@property (nonatomic, readonly, getter=isAsynchronous) BOOL asynchronous;
@property (nonatomic, readonly, getter=isExecuting) BOOL executing;
@property (nonatomic, readonly, getter=isFinished) BOOL finished;
- (void)start;
- (void)main;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSString;

SWIFT_CLASS("_TtC10PushEngage19CheckSubscriberData")
@interface CheckSubscriberData : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable deviceToken;
@end

@class ObjcErrorResponse;

SWIFT_CLASS("_TtC10PushEngage23CheckSubscriberResponse")
@interface CheckSubscriberResponse : NSObject
@property (nonatomic, readonly, strong) CheckSubscriberData * _Nullable data;
@property (nonatomic, readonly, copy) NSString * _Nullable errorMessage;
@property (nonatomic, readonly, strong) ObjcErrorResponse * _Nullable error;
@end


SWIFT_CLASS("_TtC10PushEngage15CustomUIButtons")
@interface CustomUIButtons : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC10PushEngage13CustomUIModel")
@interface CustomUIModel : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC10PushEngage5Input")
@interface Input : NSObject
- (nonnull instancetype)initWithKey:(NSString * _Nonnull)key value:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC10PushEngage17ObjcErrorResponse")
@interface ObjcErrorResponse : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable message;
@end



SWIFT_CLASS("_TtC10PushEngage14PENotification")
@interface PENotification : NSObject
@property (nonatomic, copy) void (^ _Nullable completionBlock)(PENotification * _Nullable);
@property (nonatomic, readonly, copy) NSString * _Nullable title;
@property (nonatomic, readonly, copy) NSString * _Nullable body;
@property (nonatomic, readonly, copy) NSString * _Nullable sound;
@property (nonatomic, readonly) NSInteger mutableContent;
@property (nonatomic, readonly) NSInteger contentAvailable;
@property (nonatomic, readonly, copy) NSString * _Nullable category;
@property (nonatomic, readonly, copy) NSString * _Nullable threadId;
@property (nonatomic, readonly, copy) NSString * _Nullable targetContentId;
@property (nonatomic, readonly, copy) NSString * _Nonnull tag;
@property (nonatomic, readonly, copy) NSString * _Nullable attachmentURL;
@property (nonatomic, readonly, copy) NSString * _Nullable launchURL;
@property (nonatomic, readonly) NSInteger isSponsered;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable additionalData;
@property (nonatomic, readonly, copy) NSString * _Nullable subtitle;
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull rawPayload;
@property (nonatomic, readonly, copy) NSString * _Nullable deeplinking;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class PEnotificationAction;

SWIFT_CLASS("_TtC10PushEngage24PENotificationOpenResult")
@interface PENotificationOpenResult : NSObject
@property (nonatomic, strong) PENotification * _Nonnull notification;
@property (nonatomic, strong) PEnotificationAction * _Nonnull notificationAction;
- (nonnull instancetype)initWithNotification:(PENotification * _Nonnull)notification notficationAction:(PEnotificationAction * _Nonnull)notficationAction OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC10PushEngage20PEnotificationAction")
@interface PEnotificationAction : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable actionID;
@property (nonatomic) enum ActionType actionType;
- (nonnull instancetype)initWithActionID:(NSString * _Nullable)actionID actionType:(enum ActionType)actionType OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIApplication;
@class UNNotificationRequest;
@class UNMutableNotificationContent;
enum SegmentActions : NSInteger;
@class SubscriberDetailsData;
@class TriggerCampaign;
@class NSData;
@class UNNotificationResponse;

SWIFT_CLASS("_TtC10PushEngage10PushEngage")
@interface PushEngage : NSObject
/// This computed variable is flag to enable or disable the logging  implementaion to debug and trouble-shooting
/// with in the sdk. please disble the logging when host application is in production.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL enableLogs;)
+ (BOOL)enableLogs SWIFT_WARN_UNUSED_RESULT;
+ (void)setEnableLogs:(BOOL)newValue;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// This is very important method to call for the setup of the SDK
/// if developer doesn’t want to take the over head to handle the setup call this
/// method  in init method of the Application appdelegate. other wise developer has
/// to set up the SDK manually.
+ (void)swizzleInjectionWithIsEnabled:(BOOL)isEnabled;
/// Use this static method to set the notification open block which is create while sdk initilization
/// so  when notification is opened this handler will take requried action and provide deeplinking requried user info
/// \param block pass the block type PEnotificationOpenHandler to the parameter
/// so that when notification click action take place.
///
+ (void)setNotificationOpenHandlerWithBlock:(void (^ _Nullable)(PENotificationOpenResult * _Nonnull))block;
/// Use this static method to set the notifiction handler when notification recives when app is in forground mode.
/// \param block pass the notificationForgroundHandler from the appdelegate.
///
+ (void)setNotificationWillShowInForgroundHandlerWithBlock:(void (^ _Nullable)(PENotification * _Nonnull, SWIFT_NOESCAPE void (^ _Nonnull)(PENotification * _Nullable)))block;
/// call this method in appdelegate
/// to set the app push id to the SDK to register the subsciber to that app push id.
/// \param key App push id.
///
+ (void)setAppIdWithKey:(NSString * _Nonnull)key;
/// call this method in appdelegate to start the notification services in the application.
/// and provide some pre-requisite information to the
/// SDK to handle the SDK internal setup.
/// \param application UIApplication instance
///
/// \param launchOptions UiApplication launch options.
///
+ (void)startNotificationServicesFor:(UIApplication * _Nonnull)application with:(NSDictionary<UIApplicationLaunchOptionsKey, id> * _Nullable)launchOptions;
/// Description:- This method provides the Notification service extension feature to
/// modify the content  to the application. This api will invoke if mutable content = 1
/// \param request Parameter is passed from the parent application so that method can modifiy the content.
///
+ (void)didReceiveNotificationExtensionRequest:(UNNotificationRequest * _Nonnull)request bestContentHandler:(UNMutableNotificationContent * _Nonnull)bestContentHandler SWIFT_AVAILABILITY(ios,introduced=10.0);
/// use this api call to update or add the attribute of the subscriber
/// \param attributes attribute supports [String: Any] type. eg.([“name”: “bob”]) like that
///
/// \param completionHandler call back response which provide the response as bool true and false with error.
///
+ (void)updateWithAttributes:(NSDictionary<NSString *, id> * _Nonnull)attributes completionHandler:(void (^ _Nullable)(BOOL, NSError * _Nullable))completionHandler;
/// use this method to get the attribute of the subscriber.
/// \param completionHandler call back provide the atttribute information which is [String: Any]? type and error.
///
+ (void)getAttributeWithCompletionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
/// This api is used to set the subscriber id to the server if sdk is successfully initialized in host application.
/// \param id subsciber id aka (user name of the subcriber in host application.)
///
/// \param completionHandler call this block to get the response of the api call which is bool.
///
+ (void)addProfileFor:(NSString * _Nonnull)id completionHandler:(void (^ _Nullable)(BOOL, NSError * _Nullable))completionHandler;
/// This API used to delete the subscriber attriburtes from the pushengage server.
/// \param values Array of string with attribute value or pass empty array to remove compelete info.
///
/// \param completionHandler response call back for the user.
///
+ (void)deleteAttributeWithValues:(NSArray<NSString *> * _Nonnull)values completionHandler:(void (^ _Nullable)(BOOL, NSError * _Nullable))completionHandler;
/// This Api used to update the segments to which segment subscriber is added.
/// \param segments Array of String hold the information of segments to be added.
///
/// \param action enum type .update, .remove and .delete
///
/// \param completionHandler call back with boolean if true operation
/// completed sucessfully with error if any error occurs.
///
+ (void)updateWithSegments:(NSArray<NSString *> * _Nonnull)segments with:(enum SegmentActions)action completionHandler:(void (^ _Nullable)(BOOL, NSError * _Nullable))completionHandler;
/// update the dynamic segement which is created from the pushengage dash board.
/// \param segments Array of dictionary value where key is string type and value can be Any type.
///
/// \param completionHandler call back provide response boolean and Error type.
///
+ (void)updateWithDynamic:(NSArray<NSDictionary<NSString *, id> *> * _Nonnull)segments completionHandler:(void (^ _Nullable)(BOOL, NSError * _Nullable))completionHandler;
/// Update the trigger status of the notification
/// \param status boolean flag wheather user has accepted for trigger enabled or not
///
/// \param completionHandler call back provide response boolean and Error type.
///
+ (void)updateTriggerWithStatus:(BOOL)status completionHandler:(void (^ _Nullable)(BOOL, NSError * _Nullable))completionHandler;
/// Api provides the registered subscriber information.
/// \param fields provide the fields if need field specific information like country to get only country information
/// if no fields are provided then api will give complete Subscriber details
///
/// \param completionHandler Call back provides the response as Subscriber details
///
+ (void)getSubscriberDetailsFor:(NSArray<NSString *> * _Nullable)fields completionHandler:(void (^ _Nullable)(SubscriberDetailsData * _Nullable, NSError * _Nullable))completionHandler;
/// Use this method to create the trigger for the campiagn
/// \param details provide the insctance of the Trigger campaign object and pass the details on
///
/// \param completionHandler call back provides the response as true or false.
///
+ (void)createTriggerCampaignFor:(TriggerCampaign * _Nonnull)details completionHandler:(void (^ _Nullable)(BOOL))completionHandler;
/// Use this api in notification service extension for bes attempt to deliver the notification to the device.
/// \param request Notification Request
///
/// \param content Content for the notification
///
///
/// returns:
/// returns the UNMutableNotificationContent.
+ (UNMutableNotificationContent * _Nullable)serviceExtensionTimeWillExpire:(UNNotificationRequest * _Nonnull)request content:(UNMutableNotificationContent * _Nullable)content SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,introduced=10.0);
/// Use this api to set the silent notification to handle silent push as it will give 30 sec of time frame to app so that
/// any app update can be done.
/// \param completion pass the silent notification handler to the method if developer doesn’t
/// set the completion
///
+ (void)silentPushHandler:(void (^ _Nullable)(PENotification * _Nonnull, void (^ _Nullable)(UIBackgroundFetchResult)))completion;
+ (CustomUIModel * _Nonnull)getCustomUIPayLoadFor:(UNNotificationRequest * _Nonnull)request SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,introduced=10.0);
/// User has to register the device token to the server.
/// \param deviceToken send token as data type.
///
+ (void)registerDeviceToServerWith:(NSData * _Nonnull)deviceToken;
/// Use To handle the remote notification setup from SDK from the manual integration
/// \param application UIApplication instance
///
/// \param userInfo information while get notifiation userinfo to pass to SDK.
///
/// \param completionHandler this is UIBackgroundFetchResult handler user has to send the handler from application.
///
///
/// returns:
/// Boolean value as result like any backgound work started if true otherwise false.
+ (BOOL)recivedRemoteNotificationWithApplication:(UIApplication * _Nonnull)application userInfo:(NSDictionary * _Nonnull)userInfo completionHandler:(void (^ _Nullable)(UIBackgroundFetchResult))completionHandler;
/// Setup method need to integrate in UNNotification delegate method to process the notification after
/// subscriber performs any action to the notification.
/// \param notification UNNotificationresponse of the notification delivered on device only for iOS 10+
///
+ (void)didRecivedRemoteNotificationWith:(UNNotificationResponse * _Nonnull)notification SWIFT_AVAILABILITY(ios,introduced=10.0);
@end


typedef SWIFT_ENUM(NSInteger, SegmentActions, open) {
  SegmentActionsUpdate = 0,
  SegmentActionsRemove = 1,
  SegmentActionsNone = 2,
};


SWIFT_CLASS("_TtC10PushEngage24SubsciberDetailsResponse")
@interface SubsciberDetailsResponse : NSObject
@property (nonatomic, strong) SubscriberDetailsData * _Nullable data;
@property (nonatomic, strong) ObjcErrorResponse * _Nullable error;
@property (nonatomic, copy) NSString * _Nullable errorMessage;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10PushEngage21SubscriberDetailsData")
@interface SubscriberDetailsData : NSObject
@property (nonatomic, copy) NSString * _Nullable city;
@property (nonatomic, copy) NSString * _Nullable device;
@property (nonatomic, copy) NSString * _Nullable host;
@property (nonatomic, copy) NSString * _Nullable userAgent;
@property (nonatomic, copy) NSString * _Nullable deviceType;
@property (nonatomic, copy) NSArray<NSString *> * _Nullable segments;
@property (nonatomic, copy) NSString * _Nullable timezone;
@property (nonatomic, copy) NSString * _Nullable country;
@property (nonatomic, copy) NSString * _Nullable tsCreated;
@property (nonatomic, copy) NSString * _Nullable state;
@property (nonatomic, copy) NSString * _Nullable subscriptionURL;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class TriggerNotification;

SWIFT_CLASS("_TtC10PushEngage15TriggerCampaign")
@interface TriggerCampaign : NSObject
- (nonnull instancetype)initWithCampaignName:(NSString * _Nonnull)campaignName eventName:(NSString * _Nonnull)eventName notificationDetails:(NSArray<TriggerNotification *> * _Nullable)notificationDetails data:(NSDictionary<NSString *, NSString *> * _Nullable)data OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC10PushEngage19TriggerNotification")
@interface TriggerNotification : NSObject
- (nonnull instancetype)initWithNotificationURL:(Input * _Nonnull)notificationURL title:(Input * _Nullable)title message:(Input * _Nullable)message notificationImage:(Input * _Nullable)notificationImage bigImage:(Input * _Nullable)bigImage actions:(Input * _Nullable)actions OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.4 (swiftlang-1205.0.26.9 clang-1205.0.19.55)
#ifndef PUSHENGAGE_SWIFT_H
#define PUSHENGAGE_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="PushEngage",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

typedef SWIFT_ENUM(NSInteger, ActionType, open) {
  ActionTypeOpened = 0,
  ActionTypeTaken = 1,
};

@class NSNumber;

SWIFT_CLASS("_TtC10PushEngage14AsyncOperation")
@interface AsyncOperation : NSOperation
@property (nonatomic, readonly, getter=isAsynchronous) BOOL asynchronous;
@property (nonatomic, readonly, getter=isExecuting) BOOL executing;
@property (nonatomic, readonly, getter=isFinished) BOOL finished;
- (void)start;
- (void)main;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSString;

SWIFT_CLASS("_TtC10PushEngage19CheckSubscriberData")
@interface CheckSubscriberData : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable deviceToken;
@end

@class ObjcErrorResponse;

SWIFT_CLASS("_TtC10PushEngage23CheckSubscriberResponse")
@interface CheckSubscriberResponse : NSObject
@property (nonatomic, readonly, strong) CheckSubscriberData * _Nullable data;
@property (nonatomic, readonly, copy) NSString * _Nullable errorMessage;
@property (nonatomic, readonly, strong) ObjcErrorResponse * _Nullable error;
@end


SWIFT_CLASS("_TtC10PushEngage15CustomUIButtons")
@interface CustomUIButtons : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC10PushEngage13CustomUIModel")
@interface CustomUIModel : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC10PushEngage5Input")
@interface Input : NSObject
- (nonnull instancetype)initWithKey:(NSString * _Nonnull)key value:(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC10PushEngage17ObjcErrorResponse")
@interface ObjcErrorResponse : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable message;
@end



SWIFT_CLASS("_TtC10PushEngage14PENotification")
@interface PENotification : NSObject
@property (nonatomic, copy) void (^ _Nullable completionBlock)(PENotification * _Nullable);
@property (nonatomic, readonly, copy) NSString * _Nullable title;
@property (nonatomic, readonly, copy) NSString * _Nullable body;
@property (nonatomic, readonly, copy) NSString * _Nullable sound;
@property (nonatomic, readonly) NSInteger mutableContent;
@property (nonatomic, readonly) NSInteger contentAvailable;
@property (nonatomic, readonly, copy) NSString * _Nullable category;
@property (nonatomic, readonly, copy) NSString * _Nullable threadId;
@property (nonatomic, readonly, copy) NSString * _Nullable targetContentId;
@property (nonatomic, readonly, copy) NSString * _Nonnull tag;
@property (nonatomic, readonly, copy) NSString * _Nullable attachmentURL;
@property (nonatomic, readonly, copy) NSString * _Nullable launchURL;
@property (nonatomic, readonly) NSInteger isSponsered;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable additionalData;
@property (nonatomic, readonly, copy) NSString * _Nullable subtitle;
@property (nonatomic, readonly, copy) NSDictionary * _Nonnull rawPayload;
@property (nonatomic, readonly, copy) NSString * _Nullable deeplinking;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class PEnotificationAction;

SWIFT_CLASS("_TtC10PushEngage24PENotificationOpenResult")
@interface PENotificationOpenResult : NSObject
@property (nonatomic, strong) PENotification * _Nonnull notification;
@property (nonatomic, strong) PEnotificationAction * _Nonnull notificationAction;
- (nonnull instancetype)initWithNotification:(PENotification * _Nonnull)notification notficationAction:(PEnotificationAction * _Nonnull)notficationAction OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC10PushEngage20PEnotificationAction")
@interface PEnotificationAction : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable actionID;
@property (nonatomic) enum ActionType actionType;
- (nonnull instancetype)initWithActionID:(NSString * _Nullable)actionID actionType:(enum ActionType)actionType OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIApplication;
@class UNNotificationRequest;
@class UNMutableNotificationContent;
enum SegmentActions : NSInteger;
@class SubscriberDetailsData;
@class TriggerCampaign;
@class NSData;
@class UNNotificationResponse;

SWIFT_CLASS("_TtC10PushEngage10PushEngage")
@interface PushEngage : NSObject
/// This computed variable is flag to enable or disable the logging  implementaion to debug and trouble-shooting
/// with in the sdk. please disble the logging when host application is in production.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) BOOL enableLogs;)
+ (BOOL)enableLogs SWIFT_WARN_UNUSED_RESULT;
+ (void)setEnableLogs:(BOOL)newValue;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// This is very important method to call for the setup of the SDK
/// if developer doesn’t want to take the over head to handle the setup call this
/// method  in init method of the Application appdelegate. other wise developer has
/// to set up the SDK manually.
+ (void)swizzleInjectionWithIsEnabled:(BOOL)isEnabled;
/// Use this static method to set the notification open block which is create while sdk initilization
/// so  when notification is opened this handler will take requried action and provide deeplinking requried user info
/// \param block pass the block type PEnotificationOpenHandler to the parameter
/// so that when notification click action take place.
///
+ (void)setNotificationOpenHandlerWithBlock:(void (^ _Nullable)(PENotificationOpenResult * _Nonnull))block;
/// Use this static method to set the notifiction handler when notification recives when app is in forground mode.
/// \param block pass the notificationForgroundHandler from the appdelegate.
///
+ (void)setNotificationWillShowInForgroundHandlerWithBlock:(void (^ _Nullable)(PENotification * _Nonnull, SWIFT_NOESCAPE void (^ _Nonnull)(PENotification * _Nullable)))block;
/// call this method in appdelegate
/// to set the app push id to the SDK to register the subsciber to that app push id.
/// \param key App push id.
///
+ (void)setAppIdWithKey:(NSString * _Nonnull)key;
/// call this method in appdelegate to start the notification services in the application.
/// and provide some pre-requisite information to the
/// SDK to handle the SDK internal setup.
/// \param application UIApplication instance
///
/// \param launchOptions UiApplication launch options.
///
+ (void)startNotificationServicesFor:(UIApplication * _Nonnull)application with:(NSDictionary<UIApplicationLaunchOptionsKey, id> * _Nullable)launchOptions;
/// Description:- This method provides the Notification service extension feature to
/// modify the content  to the application. This api will invoke if mutable content = 1
/// \param request Parameter is passed from the parent application so that method can modifiy the content.
///
+ (void)didReceiveNotificationExtensionRequest:(UNNotificationRequest * _Nonnull)request bestContentHandler:(UNMutableNotificationContent * _Nonnull)bestContentHandler SWIFT_AVAILABILITY(ios,introduced=10.0);
/// use this api call to update or add the attribute of the subscriber
/// \param attributes attribute supports [String: Any] type. eg.([“name”: “bob”]) like that
///
/// \param completionHandler call back response which provide the response as bool true and false with error.
///
+ (void)updateWithAttributes:(NSDictionary<NSString *, id> * _Nonnull)attributes completionHandler:(void (^ _Nullable)(BOOL, NSError * _Nullable))completionHandler;
/// use this method to get the attribute of the subscriber.
/// \param completionHandler call back provide the atttribute information which is [String: Any]? type and error.
///
+ (void)getAttributeWithCompletionHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))completionHandler;
/// This api is used to set the subscriber id to the server if sdk is successfully initialized in host application.
/// \param id subsciber id aka (user name of the subcriber in host application.)
///
/// \param completionHandler call this block to get the response of the api call which is bool.
///
+ (void)addProfileFor:(NSString * _Nonnull)id completionHandler:(void (^ _Nullable)(BOOL, NSError * _Nullable))completionHandler;
/// This API used to delete the subscriber attriburtes from the pushengage server.
/// \param values Array of string with attribute value or pass empty array to remove compelete info.
///
/// \param completionHandler response call back for the user.
///
+ (void)deleteAttributeWithValues:(NSArray<NSString *> * _Nonnull)values completionHandler:(void (^ _Nullable)(BOOL, NSError * _Nullable))completionHandler;
/// This Api used to update the segments to which segment subscriber is added.
/// \param segments Array of String hold the information of segments to be added.
///
/// \param action enum type .update, .remove and .delete
///
/// \param completionHandler call back with boolean if true operation
/// completed sucessfully with error if any error occurs.
///
+ (void)updateWithSegments:(NSArray<NSString *> * _Nonnull)segments with:(enum SegmentActions)action completionHandler:(void (^ _Nullable)(BOOL, NSError * _Nullable))completionHandler;
/// update the dynamic segement which is created from the pushengage dash board.
/// \param segments Array of dictionary value where key is string type and value can be Any type.
///
/// \param completionHandler call back provide response boolean and Error type.
///
+ (void)updateWithDynamic:(NSArray<NSDictionary<NSString *, id> *> * _Nonnull)segments completionHandler:(void (^ _Nullable)(BOOL, NSError * _Nullable))completionHandler;
/// Update the trigger status of the notification
/// \param status boolean flag wheather user has accepted for trigger enabled or not
///
/// \param completionHandler call back provide response boolean and Error type.
///
+ (void)updateTriggerWithStatus:(BOOL)status completionHandler:(void (^ _Nullable)(BOOL, NSError * _Nullable))completionHandler;
/// Api provides the registered subscriber information.
/// \param fields provide the fields if need field specific information like country to get only country information
/// if no fields are provided then api will give complete Subscriber details
///
/// \param completionHandler Call back provides the response as Subscriber details
///
+ (void)getSubscriberDetailsFor:(NSArray<NSString *> * _Nullable)fields completionHandler:(void (^ _Nullable)(SubscriberDetailsData * _Nullable, NSError * _Nullable))completionHandler;
/// Use this method to create the trigger for the campiagn
/// \param details provide the insctance of the Trigger campaign object and pass the details on
///
/// \param completionHandler call back provides the response as true or false.
///
+ (void)createTriggerCampaignFor:(TriggerCampaign * _Nonnull)details completionHandler:(void (^ _Nullable)(BOOL))completionHandler;
/// Use this api in notification service extension for bes attempt to deliver the notification to the device.
/// \param request Notification Request
///
/// \param content Content for the notification
///
///
/// returns:
/// returns the UNMutableNotificationContent.
+ (UNMutableNotificationContent * _Nullable)serviceExtensionTimeWillExpire:(UNNotificationRequest * _Nonnull)request content:(UNMutableNotificationContent * _Nullable)content SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,introduced=10.0);
/// Use this api to set the silent notification to handle silent push as it will give 30 sec of time frame to app so that
/// any app update can be done.
/// \param completion pass the silent notification handler to the method if developer doesn’t
/// set the completion
///
+ (void)silentPushHandler:(void (^ _Nullable)(PENotification * _Nonnull, void (^ _Nullable)(UIBackgroundFetchResult)))completion;
+ (CustomUIModel * _Nonnull)getCustomUIPayLoadFor:(UNNotificationRequest * _Nonnull)request SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,introduced=10.0);
/// User has to register the device token to the server.
/// \param deviceToken send token as data type.
///
+ (void)registerDeviceToServerWith:(NSData * _Nonnull)deviceToken;
/// Use To handle the remote notification setup from SDK from the manual integration
/// \param application UIApplication instance
///
/// \param userInfo information while get notifiation userinfo to pass to SDK.
///
/// \param completionHandler this is UIBackgroundFetchResult handler user has to send the handler from application.
///
///
/// returns:
/// Boolean value as result like any backgound work started if true otherwise false.
+ (BOOL)recivedRemoteNotificationWithApplication:(UIApplication * _Nonnull)application userInfo:(NSDictionary * _Nonnull)userInfo completionHandler:(void (^ _Nullable)(UIBackgroundFetchResult))completionHandler;
/// Setup method need to integrate in UNNotification delegate method to process the notification after
/// subscriber performs any action to the notification.
/// \param notification UNNotificationresponse of the notification delivered on device only for iOS 10+
///
+ (void)didRecivedRemoteNotificationWith:(UNNotificationResponse * _Nonnull)notification SWIFT_AVAILABILITY(ios,introduced=10.0);
@end


typedef SWIFT_ENUM(NSInteger, SegmentActions, open) {
  SegmentActionsUpdate = 0,
  SegmentActionsRemove = 1,
  SegmentActionsNone = 2,
};


SWIFT_CLASS("_TtC10PushEngage24SubsciberDetailsResponse")
@interface SubsciberDetailsResponse : NSObject
@property (nonatomic, strong) SubscriberDetailsData * _Nullable data;
@property (nonatomic, strong) ObjcErrorResponse * _Nullable error;
@property (nonatomic, copy) NSString * _Nullable errorMessage;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10PushEngage21SubscriberDetailsData")
@interface SubscriberDetailsData : NSObject
@property (nonatomic, copy) NSString * _Nullable city;
@property (nonatomic, copy) NSString * _Nullable device;
@property (nonatomic, copy) NSString * _Nullable host;
@property (nonatomic, copy) NSString * _Nullable userAgent;
@property (nonatomic, copy) NSString * _Nullable deviceType;
@property (nonatomic, copy) NSArray<NSString *> * _Nullable segments;
@property (nonatomic, copy) NSString * _Nullable timezone;
@property (nonatomic, copy) NSString * _Nullable country;
@property (nonatomic, copy) NSString * _Nullable tsCreated;
@property (nonatomic, copy) NSString * _Nullable state;
@property (nonatomic, copy) NSString * _Nullable subscriptionURL;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class TriggerNotification;

SWIFT_CLASS("_TtC10PushEngage15TriggerCampaign")
@interface TriggerCampaign : NSObject
- (nonnull instancetype)initWithCampaignName:(NSString * _Nonnull)campaignName eventName:(NSString * _Nonnull)eventName notificationDetails:(NSArray<TriggerNotification *> * _Nullable)notificationDetails data:(NSDictionary<NSString *, NSString *> * _Nullable)data OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC10PushEngage19TriggerNotification")
@interface TriggerNotification : NSObject
- (nonnull instancetype)initWithNotificationURL:(Input * _Nonnull)notificationURL title:(Input * _Nullable)title message:(Input * _Nullable)message notificationImage:(Input * _Nullable)notificationImage bigImage:(Input * _Nullable)bigImage actions:(Input * _Nullable)actions OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#endif
